#!/bin/bash

################################################################################
# Doily v0.1.2
# https://github.com/relsqui/doily
#
# (c) 2017 Finn Ellis.
# You are free to use, copy, modify, etc. this by the terms of the MIT license.
# See included LICENSE.txt for details.
#
# A script for managing daily writing. See README.md or `doily help`.
################################################################################

set -e

VERSION="0.1.2"

# All of these are exported so that plugins can have access to them.
# The directories comply with the XDG Base Directory Specification:
# https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
export CONF_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/doily"
export CONF_FILE="${CONF_DIR}/doily.conf"
export DEFAULT_CONF="${DOILY_TEST_ETC:-/usr/local/etc}/doily/default.conf"
export DAILIES="${XDG_DATA_HOME:-$HOME/.local/share}/doily/dailies"
export PLUGIN_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/doily/plugins"

# These will be initialized in register_plugins() later.
PRE_WRITE_PLUGINS=
POST_WRITE_PLUGINS=

read ECONFIG ESTORAGE ECOMMAND EDATE <<< $(seq 4)

error_out() {
    ############################################################################
    # Print a message and exit with the specified return value.
    #
    # Args:
    #    - A message to print to the user.
    #    - The exit code to return.
    # Returns:
    #    - None.
    ############################################################################
    message, code = $@
    echo "${message}"
    exit "${code}"
}

command_config() {
    ############################################################################
    # Opens the user's personal configuration file in their preferred editor.
    #
    # Globals:
    #    - CONF_FILE
    # Environment:
    #    - EDITOR
    # Args:
    #    - None.
    # Returns:
    #    - None.
    ############################################################################
    "${EDITOR:-nano}" "${CONF_FILE}"
}

command_help() {
    ############################################################################
    # Prints doily's help text.
    #
    # Args:
    #    - None.
    # Returns:
    #    - None.
    ############################################################################
    cat <<EOF
Doily: a daily writing manager.
https://github.com/relsqui/doily

Usage: doily [command] [arguments ...]

Commands:
    config         - Edit your personal configuration file.
    help           - Print this help.
    read [d]       - Read the entry for a given [d]ay. Days are accepted in any
                     format \`date\` understands, from "Feb 18" to "2017/02/18"
                     to "last week" (see \`date\` documentation for specifics).
                     The date "last" is also a special case interpreted as "the
                     most recent entry, whenever it was," which is the default.
    search [p] [d] - Search for a [p]attern (an extended regex) in the
                     specified [d]ay. The default pattern is empty. Days can be
                     specified as for reading; the default is all entries.
    version        - Print the installed version number of Doily.
    write          - Open today's file for writing. This is the default command
                     if no other one is specified.
EOF
}

command_read() {
    ############################################################################
    # Opens a daily file in the user's preferred pager.
    #
    # Config Vars:
    #    - DAILIES
    # Environment:
    #    - PAGER
    # Args:
    #    - An identifier for the daily to be read. This should be either the
    #      string "last" (meaning the most recent file) or a value which can
    #      be interpreted by `date`. Defaults to "last".
    # Returns:
    #    - EDATE if the daily couldn't be identified.
    ############################################################################
    if [[ -z "$1" ]]; then
        target="$(identify_dailyfile last)"
    else
        target="$(identify_dailyfile "$1")"
    fi
    if [[ -z "${target}" ]]; then
        echo "Couldn't find a daily corresponding to that date."
        return "$EDATE"
    fi
    "${PAGER:-less}" "${DAILIES}/${target}"
}

command_search() {
    ############################################################################
    # Search past daily files for a regular expression.
    #
    # Config Vars:
    #    - DAILIES
    # Args:
    #    - The pattern to search for (required but can be empty).
    #    - An identifier for the daily to search. This should be either the
    #      string "last" (meaning the most recent file) or a value which can
    #      be interpreted by `date`. Defaults to searching all files.
    # Returns:
    #    - EDATE if the daily couldn't be identified.
    ############################################################################
    if [[ -z "$2" ]]; then
        egrep "$1" "${DAILIES}"/*
        return
    fi
    target="$(identify_dailyfile "$2")"
    if [[ -z "${target}" ]]; then
        echo "Couldn't find a daily corresponding to that date."
        return "$EDATE"
    fi
    egrep "$1" "${DAILIES}/${target}"
}

command_version() {
    ############################################################################
    # Prints the current Doily version number.
    #
    # Globals:
    #    - VERSION
    # Args:
    #    - None.
    # Returns:
    #    - None.
    ############################################################################
    echo "doily v${VERSION}"
}

command_write() {
    ############################################################################
    # Opens today's daily file for writing. Sets user and group permissions
    # and possibly adds files to git, depending on user configuration.
    #
    # Globals:
    #    - DAILIES
    #    - public_dailies
    #    - doily_group
    #    - use_git
    #    - auto_commit
    # Environment:
    #    - EDITOR
    #    - USER
    # Args:
    #    - None.
    # Returns:
    #    - None.
    ############################################################################

    if [[ -n "${public_dailies}" ]]; then
        file_perms=644
        dir_perms=755
        doily_group="${USER}"
    elif [[ -n "${doily_group}" ]]; then
        file_perms=640
        dir_perms=750
    else
        file_perms=600
        dir_perms=700
        doily_group="${USER}"
    fi

    # Set permissions on everything, in case the config has changed.
    # (If you were wondering why the config file says not to use your home
    # directory as your Doily directory, this is why.)
    chmod "${dir_perms}" "${DAILIES}"
    chgrp "${doily_group}" "${DAILIES}"

    for plugin in $PRE_WRITE_PLUGINS; do
        "${PLUGIN_DIR}/${plugin}" pre_write
    done

    # Do the actual writing after the group perms, in case they were set wrong,
    # but before the file perms, in case we're adding a new one.
    "${EDITOR:-nano}" "${DAILIES}/$(date +%F)"

    if [[ -z "$(find "${DAILIES}" -maxdepth 0 -empty)" ]]; then
        # These will error out if the directory is empty (for example if the
        # text editor was closed without saving), so we check first.
        # The method is taken from: http://stackoverflow.com/a/91769
        chmod "${file_perms}" "${DAILIES}"/*
        chgrp "${doily_group}" "${DAILIES}"/*
    fi

    for plugin in $POST_WRITE_PLUGINS; do
        "${PLUGIN_DIR}/${plugin}" post_write
    done

    if [[ -n "${use_git}" ]]; then
        # This will usually be excessive but harmless; if use_git is newly turned
        # on, though, it ensures the repo gets created and finds old dailies.
        git -C "${DAILIES}" init
        git -C "${DAILIES}" add "${DAILIES}"
        # The commit commands will return non-zero if we didn't commit anything,
        # but that's okay, so add an extra true to keep set -e from exiting.
        if [[ -n "${auto_commit}" ]]; then
            git -C "${DAILIES}" commit -m "Automatic commit from Doily." || true
        else
            git -C "${DAILIES}" commit || true
        fi
    fi
}

check_config() {
    ############################################################################
    # Creates or verifies the existence of the configuration file.
    #
    # Globals:
    #    - CONF_FILE
    #    - CONF_DIR
    # Args:
    #    - None.
    # Returns:
    #    - ECONFIG if the file doesn't exist and can't be created.
    ############################################################################
    if [[ -e "${CONF_FILE}" ]]; then
        return
    fi
    if [[ -e "${DEFAULT_CONF}" ]]; then
        mkdir -p "${CONF_DIR}"
        cp "${DEFAULT_CONF}" "${CONF_FILE}"
    else
        cat <<EOF

Couldn't find a configuration file for you!
No personal configuration in ${CONF_FILE}
No default configuration in ${DEFAULT_CONF}

This isn't supposed to happen. Please check http://github.com/relsqui/doily
for an example configuration file, then put it in:

${CONF_FILE}

EOF
        return "${ECONFIG}"
    fi
}

check_storage() {
    ############################################################################
    # Does some safety checking on the daily file storage directory.
    #
    # Config Vars:
    #    - DAILIES
    # Environment:
    #    - HOME
    # Args:
    #    - None.
    # Returns:
    #    - ESTORAGE if the directory is set inappropriately.
    #    - The return value of `mkdir -p` if it needs to be created.
    ############################################################################
    if [[ -z "${DAILIES}" ]]; then
        echo "No storage location set for Doily!"\
             "Please set one by running \`doily config\`." 1>&2
        return "${ESTORAGE}"
    fi
    if [[ "${DAILIES}" != /* ]]; then
        # If it starts with ~, the shell will expand it before it gets here.
        echo "Your Doily directory is set to a relative path, which is"\
             "unsafe. Please change it by running \`doily config\`." 1>&2
        return "${ESTORAGE}"
    fi
    if [[ "${DAILIES}" -ef "${HOME}" ]]; then
        echo "Your Doily directory is set to your home directory, which is"\
             "unsafe. Please change it by running \`doily config\`."\
             "${DAILIES} == ${HOME}" 1>&2
        return "${ESTORAGE}"
    fi
    if [[ ! -d "${DAILIES}" ]]; then
        mkdir -p "${DAILIES}"
        return $?
    fi
}

identify_dailyfile() {
    ############################################################################
    # Figure out which daily file a user is referring to, and return its
    # filename. The identifier can be in any format `date` knows how to
    # interpret, or the special case "last" to mean the most recent daily.
    #
    # Config Vars:
    #    - DAILIES
    # Args:
    #    - A string which can be identified as a daily file, either "last" or
    #      any format `date` can parse.
    # Echoes:
    #    - The filename of the appropriate daily file, if it exists, or an
    #      empty string otherwise.
    # Returns:
    #    - None.
    ############################################################################
    if find "${DAILIES}" -maxdepth 0 -empty >/dev/null; then
        # More than zero daily files exist.
        if [[ "$1" == "last" ]]; then
            # Echo the last (alphabetically) file in the directory, which
            # is the most recent unless it's been manually altered.
            echo "$(ls "${DAILIES}" | tail -n 1)"
            return
        else
            filename="$(date +%F --date="$1")"
            # Date will print nothing to stdin if it fails.
            if [[ -n "${filename}" ]]; then
                if [[ -e "${DAILIES}/${filename}" ]]; then
                    echo "${filename}"
                    return
                fi
            fi
        fi
    fi
    # We couldn't find it or it didn't exist.
    echo ""
}

register_plugins() {
    ############################################################################
    # Look for installed plugins and note which ones provide what functions.
    #
    # Globals:
    #    - PLUGIN_DIR
    #    - PRE_WRITE_PLUGINS
    #    - POST_WRITE_PLUGINS
    # Args:
    #    - None.
    # Returns:
    #    - None.
    ############################################################################
    plugins="$(ls ${PLUGIN_DIR})"
    for plugin in $plugins; do
        if "${PLUGIN_DIR}/${plugin}" provides pre_write; then
            PRE_WRITE_PLUGINS="${PRE_WRITE_PLUGINS} ${plugin}"
        fi
        if "${PLUGIN_DIR}/${plugin}" provides post_write; then
            POST_WRITE_PLUGINS="${POST_WRITE_PLUGINS} ${plugin}"
        fi
    done
}

run_command() {
    ############################################################################
    # Runs the specified command with the arguments given.
    #
    # Args:
    #    - The command to be run. Defaults to "write".
    #    - Zero or more arguments to the supplied command.
    # Returns:
    #    - ECOMMAND if the requested command doesn't exist.
    ############################################################################
    doily_command="$1"
    if [[ -z "${doily_command}" ]]; then
        doily_command="write"
    fi
    # This returns failure if the args are empty, which is actually OK.
    shift || true
    case "${doily_command}" in
        config) command_config ;;
        help) command_help ;;
        read) command_read "$@" ;;
        search) command_search "$@" ;;
        version) command_version ;;
        write) command_write ;;
        *)
            echo "Use \`doily help\` to see help and other commands."
            return "${ECOMMAND}"
            ;;
    esac
}

main() {
    check_config || return $?
    source "${CONF_FILE}"
    check_storage || return $?
    register_plugins || return $?
    run_command "$@"
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    main "$@"
fi
