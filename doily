#!/bin/bash

# Doily (c) 2017 Finn Ellis. MIT License.
# Facilitate writing into a daily journal file.
# https://github.com/relsqui/doily

set -e

if [[ -e ~/.doilyrc ]]; then
    source ~/.doilyrc
else
    # This bit of magic is determining the directory where the script being
    # executed is located, across symlinks, to get to the example config.
    # Based on: http://unix.stackexchange.com/a/17500
    cp $(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/default.doilyrc ~/.doilyrc
    echo "cp $(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/default.doilyrc ~/"
    cat <<EOF
No config file found. A file called .doilyrc has been created in your home
directory. You can take a look at it if you want to change the default
settings (or just find out what they are).

When you're ready, run \`doily\` again to write your first daily!
EOF
    exit 0
fi

if [[ -n "$public_dailies" ]]; then
    file_perms=644
    dir_perms=755
    doily_group="$USER"
elif [[ -n "$doily_group" ]]; then
    file_perms=640
    dir_perms=750
else
    file_perms=600
    dir_perms=700
    doily_group="$USER"
fi

if [[ -z "${doily_dir}" ]]; then
    echo "No storage location set for Doily!"\
         "Please set one by editing ~/.doilyrc" 1>&2
    exit 1
elif [[ "${doily_dir}" != /* ]]; then
    # If it starts with ~, the shell will expand it before it gets here.
    echo "Your Doily directory is set to a relative path, which is"\
         "unsafe. Please change it by editing ~/.doilyrc" 1>&2
    exit 1
elif [[ "${doily_dir}" -ef "${HOME}" ]]; then
    echo "Your Doily directory is set to your home directory, which is"\
         "unsafe. Please change it by editing ~/.doilyrc" 1>&2
    exit 1
elif [[ ! -d "${doily_dir}" ]]; then
    mkdir "${doily_dir}"
fi

old_dir="${PWD}"
cd "${doily_dir}"

# Default to nano if the preferred editor is empty.
"${EDITOR:-nano}" "$(date +%F)"

# Set permissions on everything, in case the config has changed.
# (If you were wondering why the config file says not to use your home
# directory as your Doily directory, this is why.)
chmod "$dir_perms" .
chgrp "$doily_group" .

if [[ -n "$(ls -A "${doily_dir}" | grep -v .git)" ]]; then
    # These will error out if the directory is empty (for example if the text
    # editor was closed without saving), so we check first.
    chmod "$file_perms" ./*
    chgrp "$doily_group" ./*
fi

if [[ -n "${use_git}" ]]; then
    # This will usually be excessive but harmless; if use_git is newly turned
    # on, though, it ensures the repo gets created and old dailies are included.
    git init
    git add .
    if [[ -n "${auto_commit}" ]]; then
        git commit -m "Automatic commit from Doily."
    else
        git commit
    fi
fi

cd "$old_dir"
