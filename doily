#!/bin/bash

# Facilitate writing into a daily journal file.
# https://github.com/relsqui/doily

set -e

if [[ -e ~/.doilyrc ]]; then
    source ~/.doilyrc
else
    cat >~/.doilyrc <<EOF
# SUMMARY OF DEFAULTS

# If you change nothing in this file, here's what will be true:

#   * You'll write dailies with the editor defined in your \$EDITOR
#     (or nano if you don't have an editor preference set).
#   * Your dailies will be stored in ~/dailies.
#   * Only you will be able to read them.
#   * They'll be automatically committed to git with a generic message.

# If all that sounds good, you can stop here!


# PRIVACY OPTIONS

# You have three privacy choices:

#   * dailies only readable by you (default)
#   * dailies visible to all members of a group
#   * dailies visible to all users on the system

# Whatever option you choose will be applied to everything in your dailies
# directory (including any extra files you choose to add). If you change
# your privacy options later, the new permissions will be applied retroactively
# to any previous dailies.

# To allow everyone to read your dailies, set this to anything non-empty.
public_dailies=

# To allow a group to read your dailies, put the group name here.
# (If public_dailies is set, this value is ignored.)
doily_group=


# GIT OPTIONS

# git saves old versions of files so you can recover them if you accidentally
# delete or change something you didn't mean to. If you're not familiar with
# it, it's safe to turn these options off or ignore them.

# To keep your dailies in git, set this to anything non-empty. If you add any
# extra files to your Doily directory, they'll be included in the repo.
use_git=y

# If you don't care about the content of your commit messages, set this to
# anything non-empty to have automatic messages inserted for you.
# (This only does anything if use_git is turned on.)
auto_commit=y

# If you turn *off* use_git after writing some dailies, the existing repository
# won't be deleted. (You can do so by deleting the directory called .git inside
# your Doily directory.) If you turn *on* use_git after writing some dailies,
# old dailies will be added to the newly-created repository.


# TEXT EDITOR PREFERENCE

# Doily reads the EDITOR environment variable to determine what text editor to
# use. A good place to set that variable is by exporting it from your .bashrc
# file by adding a line like this one:
#   export EDITOR=vim # (or whatever you like better)
# If you want to set a different preference just for Doily, you can do that here.
# If you do neither, Doily will use nano.
#EDITOR=


# LOCATION OPTION

# Doily will assume that it's safe to change permissions on everything in this
# directory. If you need to change it, make sure it's an absolute path (one that
# starts with / or ~). Don't set it to a directory you use for something else,
# especially not your home directory, and don't set it to empty.

# Where should your Doily files be stored?
doily_dir=~/.doily_files

# If you change the location after writing some dailies, the old dailies will
# stay in the old location. All your configuration will be applied to the new
# location (after the next time you run Doily), including creating a new git
# repository if necessary, but future changes will not propagate back to the
# old location.
EOF
    chmod 600 ~/.doilyrc
    cat <<EOF
No config file found. A file called .doilyrc has been created in your home
directory. You can take a look at it if you want to change the default
settings (or just find out what they are).

When you're ready, run \`doily\` again to write your first daily!
EOF
    exit 0
fi

if [[ -n "$public_dailies" ]]; then
    file_perms=644
    dir_perms=755
    doily_group="$USER"
elif [[ -n "$doily_group" ]]; then
    file_perms=640
    dir_perms=750
else
    file_perms=600
    dir_perms=700
    doily_group="$USER"
fi

if [[ -z "${doily_dir}" ]]; then
    echo "No storage location set for Doily!"\
         "Please set one by editing ~/.doilyrc" 1>&2
    exit 1
elif [[ "${doily_dir}" != /* ]]; then
    echo "Your Doily directory is set to a relative path, which is"\
         "unsafe. Please change it by editing ~/.doilyrc" 1>&2
    exit 1
elif [[ "${doily_dir}" -ef "${HOME}" ]]; then
    echo "Your Doily directory is set to your home directory, which is"\
         "unsafe. Please change it by editing ~/.doilyrc" 1>&2
    exit 1
elif [[ ! -d "${doily_dir}" ]]; then
    mkdir "${doily_dir}"
fi

# Do this every time, in case the config has changed.
chmod "$dir_perms" "${doily_dir}"
chgrp "$doily_group" "${doily_dir}"

old_dir="${PWD}"
cd "${doily_dir}"

# Do this every time, in case the config has changed.
if [[ -n "$use_git" ]]; then
    git init
fi
today="$(date +%F)"
touch "$today"
# Set permissions on everything, in case the config has changed.
# (If you were wondering why the config file says not to use your home
# directory as your Doily directory, this is why.)
chmod "$file_perms" *
chgrp "$doily_group" *

# Default to nano if the preferred editor is empty.
"${EDITOR:-nano}" "$today"

if [ -n "${use_git}" ]; then
    # Add everything, to catch old dailies if the repository is new.
    git add .
    if [ -n "${auto_commit}" ]; then
        git commit -m "Automatic commit for ${today}."
    else
        git commit
    fi
fi
cd "$old_dir"
